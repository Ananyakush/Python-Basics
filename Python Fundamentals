{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "760958e0",
   "metadata": {},
   "source": [
    "#### BASIC PRACTICE TOPICS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f90b80e",
   "metadata": {},
   "source": [
    "#### SYNTAX PRINTING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70968e81",
   "metadata": {},
   "source": [
    "#### Question:\n",
    "Write a Python command that prints the message \"Hello, world!\" using the print function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56554ef2",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Hello, world!')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07d034b8",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Use triple quotes to print a multi-line message with three lines of text. For example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ac0f80b9",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "welcome to python!\n",
      "this is a multi line message\n",
      "enjoyy coding\n",
      "see ya\n"
     ]
    }
   ],
   "source": [
    "print('''welcome to python!\n",
    "this is a multi line message\n",
    "enjoyy coding\n",
    "see ya''')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d810585",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Store your name in a variable and use it in a print statement to output\n",
    "\"Hello, [Your Name]! Welcome to Python.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ff6e3229",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello, Ananya! welcome to python\n"
     ]
    }
   ],
   "source": [
    "name = \"Ananya!\"\n",
    "print('hello, '+ name +' welcome to python')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1067b16e",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Write code that combines two or more string variables in a single print statement.\n",
    "For instance, if greeting = \"Hello\" and name = \"Ananya\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "284f0c54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Ananya\n"
     ]
    }
   ],
   "source": [
    "Greeting = 'Hello'\n",
    "name = 'Ananya'\n",
    "print(Greeting + ' '+ name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ebf564e",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Use escape characters to print a message with a new line and a tab space. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "18814540",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, Ananya! \n",
      "\t welcome to python \n",
      "see ya\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello, Ananya! \\n\\t welcome to python \\nsee ya\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb94b3be",
   "metadata": {},
   "source": [
    "#### Variables and Data Types"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be8c5f47",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Create variables for your name, age, and height, and print each one on a new line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0cde2fe0",
   "metadata": {},
   "outputs": [],
   "source": [
    "name = \"Ananya\"\n",
    "age = 24\n",
    "is_student = False\n",
    "height = 5.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "db4dbe3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name Ananya\n",
      "age 24\n",
      "is a student False\n",
      "height 5.4\n"
     ]
    }
   ],
   "source": [
    "print(\"name\",name)\n",
    "print(\"age\",age)\n",
    "print(\"is a student\",is_student) \n",
    "print(\"height\",height)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eef2a65f",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Assign an initial value to a variable for your age, then update the variable to a new value and print it both before and after changing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "abc33134",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "original age : 25\n",
      "updated age : 24\n"
     ]
    }
   ],
   "source": [
    "age = 25\n",
    "print(\"original age :\", age)\n",
    "\n",
    "age  =  24\n",
    "print('updated age :', age)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7acd287",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Create variables of different types (integer, float, string, boolean) and print each one’s value and data type using the type() function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2d438a1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name is of type :  <class 'str'>\n",
      "age is of type :  <class 'int'>\n",
      "is a student is of type :  <class 'bool'>\n",
      "height is of type :  <class 'float'>\n"
     ]
    }
   ],
   "source": [
    "name = \"Ananya\"\n",
    "age = 24\n",
    "is_student = False\n",
    "height = 5.4\n",
    "\n",
    "print(\"name is of type : \", type(name))\n",
    "print(\"age is of type : \", type(age))\n",
    "print(\"is a student is of type : \", type(is_student)) \n",
    "print(\"height is of type : \", type(height))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e0de3af",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Create variables for your age and a friend’s age, and calculate the combined age using these variables. Print the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "cbaa4678",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "combined age :  49\n"
     ]
    }
   ],
   "source": [
    "my_age = 24\n",
    "friends_age = 25\n",
    "combined_age = my_age + friends_age\n",
    "print(\"combined age : \", combined_age)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0764404d",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Try concatenating different data types in a single print statement using str() to convert non-string variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "964b2259",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello, my name is Ananya i,am 24 year old and my height is 5.4\n"
     ]
    }
   ],
   "source": [
    "name = \"Ananya\"\n",
    "age = 24\n",
    "height = 5.4\n",
    "\n",
    "print(\"hello, my name is \" + name + \" i,am \" + str(age) + \" year old and my height is \" + str(height) )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd3b8124",
   "metadata": {},
   "source": [
    "#### Basic Operators"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8e3610b",
   "metadata": {},
   "source": [
    "#### Concept:\n",
    "Understand arithmetic operators (+, -, *, /, //, %, **), comparison operators (==, !=, >, <), and logical operators (and, or, not)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "6d0409c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "5.0\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "sum = 10 + 5\n",
    "div = 10 / 2\n",
    "is_equal = (10 == 10)\n",
    "is_true = (10>5) and (5<10)\n",
    "\n",
    "print(sum)\n",
    "print(div)\n",
    "print(is_equal)\n",
    "print(is_true)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffe2d33c",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Using the arithmetic operators, calculate the following:\n",
    "The sum of 25 and 10.\n",
    "The product of 7 and 6.\n",
    "The difference between 50 and 12.\n",
    "The result of dividing 50 by 3 (float division).\n",
    "The integer division of 50 by 3.\n",
    "The remainder when dividing 50 by 3 (modulo).\n",
    "The square of 8 using the exponentiation operator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "dc20e0f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35\n",
      "42\n",
      "16.666666666666668\n",
      "16\n",
      "2\n",
      "64\n"
     ]
    }
   ],
   "source": [
    "sum = 25 + 10\n",
    "product = 7*6\n",
    "diff = 50-12\n",
    "div = float(50/3)\n",
    "div1 = int(50/3)\n",
    "reminder = 50%3\n",
    "square = 8**2\n",
    "\n",
    "print(sum)\n",
    "print(product)\n",
    "print(div)\n",
    "print(div1)\n",
    "print(reminder)\n",
    "print(square)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77b315de",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Write code to compare two numbers, a = 15 and b = 20, using the comparison operators:\n",
    "Check if a is equal to b.\n",
    "Check if a is greater than b.\n",
    "Check if a is less than or equal to b.\n",
    "Check if a is not equal to b."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c264dc5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "is a equal to b ? False\n",
      "is a greater to b ? False\n",
      "is a less than and equal to b ? True\n",
      "is a not equal to b ? True\n"
     ]
    }
   ],
   "source": [
    "a=15\n",
    "b=20\n",
    "\n",
    "is_equal = (a==b)\n",
    "is_greater = (a>b)\n",
    "is_less_equal =(a<=b) \n",
    "is_not_equal = (a!=b)\n",
    "\n",
    "print(\"is a equal to b ?\",is_equal)\n",
    "print(\"is a greater to b ?\",is_greater)\n",
    "print(\"is a less than and equal to b ?\",is_less_equal)\n",
    "print(\"is a not equal to b ?\",is_not_equal)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bdf69c9",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Use logical operators to check the following conditions:\n",
    "Check if both 5 > 3 and 10 < 20 are true.\n",
    "Check if either 5 > 10 or 15 == 15 is true.\n",
    "Check if not (10 > 20) is true."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "26b73a68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Both conditions are true: True\n",
      "Either condition is true: False\n",
      "Condition is true: True\n"
     ]
    }
   ],
   "source": [
    "both_true = (5>3)and(10<20)\n",
    "either_true = (5>10)and(15==15)\n",
    "not_condition = (5>3)and(10<20)\n",
    "\n",
    "print(\"Both conditions are true:\", both_true)\n",
    "print(\"Either condition is true:\", either_true)\n",
    "print(\"Condition is true:\", not_condition)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "838f5826",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Calculate the result of the following expression:\n",
    "\n",
    "(25 + 5) * 3 / 2 - 10 % 3 == 15\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "64d08bb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(25 + 5) * 3 / 2 - 10 % 3 == 15"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f70cbf41",
   "metadata": {},
   "source": [
    "#### Question:\n",
    "Write an expression to check if a number x = 10 is both greater than 5 and less than 20 using logical and comparison operators. Print True if both conditions are met, otherwise print False."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "f47fd49d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "a=10\n",
    "result = (a>5) and (a<20)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29fbfe62",
   "metadata": {},
   "source": [
    "#### Conditional Statements (if, elif, else)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e57630d",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Write a program that checks if a number is even or odd."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e1ffe5da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number :13.2\n",
      "number is odd\n"
     ]
    }
   ],
   "source": [
    "number = float(input(\"enter a number :\"))\n",
    "if number % 2 ==0:\n",
    "    print('number is even')\n",
    "else:\n",
    "    print('number is odd')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "288e7ab3",
   "metadata": {},
   "source": [
    "#### Question:\n",
    "Write a program that checks if a person can vote. If the age is 18 or more, print \"Eligible to vote\"; otherwise, print \"Not eligible to vote.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "b2f00979",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter your age :24\n",
      "eligiable to vote\n"
     ]
    }
   ],
   "source": [
    "age = int(input('enter your age :'))\n",
    "if age >= 18:\n",
    "    print(\"eligiable to vote\")\n",
    "else:\n",
    "    print(\"not eligiable to vote\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "285849e9",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Write a program that takes a student's marks as input and prints the grade:\n",
    "90+: \"A\"\n",
    "80-89: \"B\"\n",
    "70-79: \"C\"\n",
    "60-69: \"D\"\n",
    "Below 60: \"F\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "4e727716",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter your marks 80\n",
      "grade B\n"
     ]
    }
   ],
   "source": [
    "marks = float(input(\"enter your marks \"))\n",
    "if marks >= 90:\n",
    "    print(\"grade A\")\n",
    "elif marks >=80:\n",
    "    print(\"grade B\")\n",
    "elif marks >= 70:\n",
    "    print(\"Grade: C\")\n",
    "elif marks >= 60:\n",
    "    print(\"Grade: D\")\n",
    "else:\n",
    "    print(\"Grade: F\")   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45209c38",
   "metadata": {},
   "source": [
    "#### Question:\n",
    "Write a program that checks if a given year is a leap year. A year is a leap year if it is divisible by 4 but not by 100, except when it is divisible by 400."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "99134c79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a year 2071\n",
      "Year is not a leap year\n"
     ]
    }
   ],
   "source": [
    "year = int(input(\"enter a year \"))\n",
    "if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n",
    "    print(\"Year is a leap year\")\n",
    "else:\n",
    "    print(\"Year is not a leap year\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c89d1a1",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Write a program that categorizes a person based on their age:\n",
    "Under 13: \"Child\"\n",
    "13-19: \"Teen\"\n",
    "20 and above: \"Adult\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "e3e8e7d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the age 56\n",
      "adult\n"
     ]
    }
   ],
   "source": [
    "age = int(input(\"enter the age \"))\n",
    "if age<13:\n",
    "    print(\"child\")\n",
    "elif age>=13 and age<=19:\n",
    "    print(\" teen\")\n",
    "else:\n",
    "    print(\"adult\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aceee7cf",
   "metadata": {},
   "source": [
    "#### Loops (for and while loops)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fb63879",
   "metadata": {},
   "source": [
    "#### Question:\n",
    "Write a program that uses a for loop to print numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0277a034",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,11):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21b8835c",
   "metadata": {},
   "source": [
    "#### Question:\n",
    "Write a program that uses a while loop to print numbers from 10 down to 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "65a5756d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "9\n",
      "8\n",
      "7\n",
      "6\n",
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "count = 10\n",
    "while count>0:\n",
    "    print(count)\n",
    "    count-=1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d755bd1",
   "metadata": {},
   "source": [
    "#### Question: \n",
    "Write a program that calculates the sum of the first 10 natural numbers (1 to 10)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7f1fdc2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sum of 1st 10 natural no.  55\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "for i in range(1,11):\n",
    "    total+=i\n",
    "print(\"sum of 1st 10 natural no. \",total)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb705393",
   "metadata": {},
   "source": [
    "#### LIST, TUPLE, DICTIONARY,  ARRAY"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a983314d",
   "metadata": {},
   "source": [
    "### List Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "227a0991",
   "metadata": {},
   "source": [
    "#### QUESTION \n",
    "Create a list of your favorite fruits. Add a new fruit to the list and print the updated list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cc08cd60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "updated list of fruits ['apple', 'mango', 'banana', 'orange']\n"
     ]
    }
   ],
   "source": [
    "my_list=[\"apple\",\"mango\",\"banana\"]\n",
    "my_list.append(\"orange\")\n",
    "print(\"updated list of fruits\",my_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76013f43",
   "metadata": {},
   "source": [
    "#### QUESTION\n",
    "Remove the second item in a list of numbers [5, 10, 15, 20, 25] and print the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b5ad348a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "updated list [5, 15, 20, 25]\n"
     ]
    }
   ],
   "source": [
    "number = [5, 10, 15, 20, 25]\n",
    "number.pop(1)\n",
    "print(\"updated list\",number)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d97a3acc",
   "metadata": {},
   "source": [
    "#### QUESTION\n",
    "Given a list of numbers, [2, 4, 6, 8, 10], find and print the sum of all elements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3deb146f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sum of all elements 30\n"
     ]
    }
   ],
   "source": [
    "my_list1 =  [2, 4, 6, 8, 10]\n",
    "total_sum = sum(my_list1)\n",
    "print(\"sum of all elements\",total_sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afd6acea",
   "metadata": {},
   "source": [
    "#### QUESTION \n",
    "Reverse a list [1, 2, 3, 4, 5] and print the reversed list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2732a5c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new list  [5, 4, 3, 2, 1]\n"
     ]
    }
   ],
   "source": [
    "numbers = [1, 2, 3, 4, 5]\n",
    "new_list = numbers[::-1]\n",
    "print(\"new list \",new_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9be0b5dc",
   "metadata": {},
   "source": [
    "#### QUESTION \n",
    "Sort the list [12, 3, 45, 7, 1] in ascending order and print it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5843af6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new list  [1, 3, 7, 12, 45]\n"
     ]
    }
   ],
   "source": [
    "numbers = [12, 3, 45, 7, 1]\n",
    "numbers.sort()\n",
    "print(\"new list \", numbers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "05bf1d43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new list  [45, 12, 7, 3, 1]\n"
     ]
    }
   ],
   "source": [
    "number = [12, 3, 45, 7, 1]\n",
    "number.sort(reverse = True)\n",
    "print(\"new list \", number)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2507928d",
   "metadata": {},
   "source": [
    "#### what will be the output question\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "aa3c2070",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "my_list = [1, 2, 3]\n",
    "my_list.append(4)\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "50f94219",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10, 25, 30, 40]\n"
     ]
    }
   ],
   "source": [
    "my_list = [10, 20, 30, 40]\n",
    "my_list[1] = 25\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a1b472d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "my_list = [5, 6, 7]\n",
    "print(my_list[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "64c7d31f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10, 20]\n"
     ]
    }
   ],
   "source": [
    "my_list = [10, 20, 30]\n",
    "my_list.pop()\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4535baf0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 5, 4, 6]\n"
     ]
    }
   ],
   "source": [
    "my_list = [2, 4, 6]\n",
    "my_list.insert(1, 5)\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30a28eb0",
   "metadata": {},
   "source": [
    "#### 1. Insert an item at a specific position in a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e69bf36d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new list  [10, 20, 30, 40, 25, 50]\n"
     ]
    }
   ],
   "source": [
    "numbers = [10, 20, 30, 40, 50]\n",
    "\n",
    "numbers.insert(4,25)\n",
    "print('new list ', numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bea4d16",
   "metadata": {},
   "source": [
    " #### 2. Append a list inside another list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c5eb3d3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new list [1, 2, 3, [7, 8, 9]]\n"
     ]
    }
   ],
   "source": [
    "numbers = [1, 2, 3]\n",
    "\n",
    "numbers.append([7,8,9])\n",
    "print('new list', numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26ffe238",
   "metadata": {},
   "source": [
    "#### 3. Extend a list with another list (combining two lists)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7eb0249d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new list  [1, 2, 3, 4, 5, 6]\n"
     ]
    }
   ],
   "source": [
    "numbers = [1, 2, 3]\n",
    "\n",
    "numbers.extend([4,5,6])\n",
    "print(\"new list \",numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb46cbb8",
   "metadata": {},
   "source": [
    "#### 4. List inside a list (Nested lists) and accessing elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b3131b7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "element from inner  4\n"
     ]
    }
   ],
   "source": [
    "numbers = [1, 2, [3, 4, 5], 6]\n",
    "inner_list = numbers[2][1]\n",
    " \n",
    "print('element from inner ',inner_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40a4042e",
   "metadata": {},
   "source": [
    "#### 5. Remove an item at a specific position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "43a8bba4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new list  [10, 20, 30, 50]\n"
     ]
    }
   ],
   "source": [
    "numbers = [10, 20, 30, 40, 50]\n",
    "numbers.pop(3)\n",
    "\n",
    "print('new list ',numbers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7597a7d8",
   "metadata": {},
   "source": [
    "#### 6. Removing all elements from a nested list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d682998c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new list  [1, 2, [], 6]\n"
     ]
    }
   ],
   "source": [
    "numbers = [1, 2, [3, 4, 5], 6]\n",
    "\n",
    "numbers[2].clear()\n",
    "\n",
    "print(\"new list \",numbers )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d452f8",
   "metadata": {},
   "source": [
    "### Tuple Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ec0e3ae",
   "metadata": {},
   "source": [
    "1. Create a tuple of 5 elements and print the second element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0493db98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "second element  2\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (1,2,3,4,5)\n",
    "\n",
    "print(\"second element \",my_tuple[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cc0b7d4",
   "metadata": {},
   "source": [
    "2. Concatenate two tuples and print the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "282c8a46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new tuple  (1, 2, 3, 4, 4, 5, 6, 7)\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (1, 2, 3, 4)\n",
    "tuple2 = (4, 5, 6, 7)\n",
    "\n",
    "tuple3 = tuple1 + tuple2 \n",
    "\n",
    "print(\"new tuple \",tuple3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86364a42",
   "metadata": {},
   "source": [
    "3. Create a tuple with 3 numbers and find the index of a particular element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "63916689",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intex of 20 :  1\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (10, 20, 30)\n",
    "\n",
    "index_element = tuple1.index(20)\n",
    "print(\"intex of 20 : \", index_element)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cde46a89",
   "metadata": {},
   "source": [
    "4. Use slicing to print elements from index 1 to 3 in the tuple (10, 20, 30, 40, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "68d20b52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sliced tuple (20, 30, 40)\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (10, 20, 30, 40, 50)\n",
    "\n",
    "sliced_tuple = tuple1[1:4]\n",
    "\n",
    "print('sliced tuple',sliced_tuple)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d057d07",
   "metadata": {},
   "source": [
    "#### \"What will be the output?\" questions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "1af734a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (10, 20, 30); \n",
    "print(my_tuple[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e5bb6ffa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4)\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (1, 2); \n",
    "tuple2 = (3, 4); \n",
    "print(tuple1 + tuple2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "5e843c7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "tuple = (\"a\", \"b\", \"c\"); \n",
    "print(tuple.index(\"b\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "13bd91ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(20, 30, 40)\n"
     ]
    }
   ],
   "source": [
    "tuple = (10, 20, 30, 40, 50); \n",
    "print(tuple[1:4])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb89452d",
   "metadata": {},
   "source": [
    "### Dictionary Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c259fce",
   "metadata": {},
   "source": [
    "1. Create a dictionary with at least 3 key-value pairs and access the value using a key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "efad32fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name  ananya\n"
     ]
    }
   ],
   "source": [
    "dict1 = {'name':'ananya', 'age': 24, 'city' : 'UP'}\n",
    "\n",
    "print('name ',dict1['name'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f208048d",
   "metadata": {},
   "source": [
    "2. Add a new key-value pair to the dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9c15dc24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "updated dictionary {'name': 'ananya', 'age': 24, 'city': 'UP', 'profession': 'Analyst'}\n"
     ]
    }
   ],
   "source": [
    "dict1['profession'] = 'Analyst'\n",
    "print('updated dictionary',dict1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3199bd4d",
   "metadata": {},
   "source": [
    "3. Update the value of an existing key in the dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d645ee8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "upadted dict {'name': 'ananya', 'age': 26, 'city': 'UP', 'profession': 'Analyst'}\n"
     ]
    }
   ],
   "source": [
    "dict1['age'] = 26\n",
    "print('upadted dict',dict1 )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "248cf79f",
   "metadata": {},
   "source": [
    "4. Remove a key-value pair from the dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "97f4fe4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "upadted dict  {'name': 'ananya', 'age': 26, 'profession': 'Analyst'}\n"
     ]
    }
   ],
   "source": [
    "del dict1['city']\n",
    "print('upadted dict ',dict1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e830a31d",
   "metadata": {},
   "source": [
    "5. Check if a key exists in the dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8912a6a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "key exist\n"
     ]
    }
   ],
   "source": [
    "if 'name' in dict1:\n",
    "    print('key exist')\n",
    "else:\n",
    "    print('not exist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90d81c82",
   "metadata": {},
   "source": [
    "#### \"What will be the output?\" questions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "23b55060",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "my_dict = {\"a\": 1, \"b\": 2}; \n",
    "print(my_dict[\"a\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "6f311d51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'x': 30, 'y': 20}\n"
     ]
    }
   ],
   "source": [
    "my_dict = {\"x\": 10, \"y\": 20}; \n",
    "my_dict[\"x\"] = 30; \n",
    "print(my_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "64a3b3c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'Ananya', 'age': 25, 'location': 'India'}\n"
     ]
    }
   ],
   "source": [
    "my_dict = {\"name\": \"Ananya\", \"age\": 25}; \n",
    "my_dict[\"location\"] = \"India\"; \n",
    "print(my_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "2e746c99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'banana': 2}\n"
     ]
    }
   ],
   "source": [
    "my_dict = {\"apple\": 1, \"banana\": 2}; \n",
    "del my_dict[\"apple\"]; \n",
    "print(my_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe314d4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_dict = {\"name\": \"John\", \"age\": 30}; \n",
    "print(\"age\" in my_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8d0c5db",
   "metadata": {},
   "source": [
    "### Array Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "578218ec",
   "metadata": {},
   "source": [
    "1. Create an integer array and access the first element\n",
    "python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "80f577db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first element 10\n"
     ]
    }
   ],
   "source": [
    "array1 = [10, 20, 30, 40, 50]\n",
    "\n",
    "print('first element', array1[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ad79b1b",
   "metadata": {},
   "source": [
    "2. Append an element to an existing array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "a2e68f9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new array  [10, 20, 30, 40, 50, 60]\n"
     ]
    }
   ],
   "source": [
    "array1.append(60)\n",
    "print('new array ',array1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98997367",
   "metadata": {},
   "source": [
    "3. Find the length of the array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "b49d3128",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "length  6\n"
     ]
    }
   ],
   "source": [
    "length = len(array1)\n",
    "print('length ', length)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eaabb53",
   "metadata": {},
   "source": [
    "4. Remove an element from the array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "cb746017",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new array  [10, 20, 40, 50, 60]\n"
     ]
    }
   ],
   "source": [
    "array1.remove(30)\n",
    "print('new array ',array1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e1bfe2c",
   "metadata": {},
   "source": [
    "5. Check if an element exists in the array python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "8758d691",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "it exist\n"
     ]
    }
   ],
   "source": [
    "if 20 in array1:\n",
    "    print(\"it exist\")\n",
    "else:\n",
    "    print('not exist')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "060c6cc2",
   "metadata": {},
   "source": [
    "#### \"What will be the output?\" questions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "4d26e8d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "import array; \n",
    "arr = array.array('i', [1, 2, 3]); \n",
    "print(arr[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "f2a6aad6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array('i', [1, 2, 3, 4])\n"
     ]
    }
   ],
   "source": [
    "import array;\n",
    "arr = array.array('i', [1, 2, 3]); \n",
    "arr.append(4); print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "02733bb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "import array; \n",
    "arr = array.array('i', [10, 20, 30]); \n",
    "print(len(arr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "683e3dce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array('i', [5, 15])\n"
     ]
    }
   ],
   "source": [
    "import array; \n",
    "arr = array.array('i', [5, 10, 15]); \n",
    "arr.remove(10); \n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "1ebc4f5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "import array; \n",
    "arr = array.array('i', [1, 2, 3, 4]); \n",
    "print(3 in arr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc26d9a5",
   "metadata": {},
   "source": [
    "## Practice Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a5569a5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
